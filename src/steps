1. create-react-app@latest tic-tac-toe

code: 
npx create-react-app@latest tic-tac-toe

2. download css

3. In the src folder of your tic-tac-toe project create a new file and name it Square.jsx

4. create Square.jsx 
-import React from react
-Create an arrow function called Square
-Outside of the function export it as default
-In the return statement of the function create a div with a class name of square
-Inside the div display the word square

code: 
import React from "react";

const Square = () => {

    return (
        <div className="square">
            square
        </div>
    );
};

export default Square;

5. Render Square.jsx in App.js
-Remove all html except the div with className of App from App.js
-Import Square.js into App.js
-Render the Square component inside of the App div

code: 
import "./App.css";
import Square from "./Square";

...

return (
    <Square/>
);

6. Create a variable in App.js and pass it as props to the square component 
-Above the return statement, create a variable of your choice and assign it a value of a string of your choice
-In the return, on the Square component create an attribute called propVar and set it equal to the variable you created in the previous step using JSX

code: 
const propVariable = 'This is a prop'

...

<Square propVar={propVariable}/>

7. Render the prop variable in the Square component
-In Square.jsx take props as an argument to your Square function
-In the returned <div> replace the word square with props.variableName (variableName being the variable you created in Step 4)

code: 
import React from "react";

const Square = (props) => {

    return (
        <div className="square">
            {props.propsVar}
        </div>
    );
};

export default Square;

8. In App.js desstructure useState from react 
-At the top of App.js add import { useState } from 'react'

code: 
import { useState } from "react";
import "./App.css";
import Square from "./Square";

9. Initialize state variables for the game board and the player turn 
-Using array destructuring initialize the state for the games squares to an array of 9 empty strings
-Using the same method initialize state of the player variable to a boolean of true

code: 
const [squares, setSquares] = useState(["", "", "", "", "", "", "", "", ""]);
const [player, setPlayer] = useState(true);

10. Pass the state variables and setters as props to the square component 
-Add a prop of squares that is equal to the squares state variable to the Square component
-Add a prop of setSquares that is equal to the setSquares function to the Square component
-Add a prop of player that is equal to the player state variable to the Square component
-Add a prop of setPlayer that is equal to the setPlayer function to the Square component
-Remove the existing prop from the Square component

code: 
<Square
    squares={squares}
    setSquares={setSquares}
    player={player}
    setPlayer={setPlayer}
/>

11. Varify that props is passed correctly 
-In Square.jsx remove the render of the previous variable
-console.log(props.squares, props.player)

code: 
console.log(props.squares, props.player)

Result:  (9) ['', '', '', '', '', '', '', '', ''] true

12. Map ober the squares array and render the Square.jsx component for each item in the array 
-In the return statement of App.js remove the comment out the Square component
-Inside of the div with the className of “App” create a new div with a className of “container”
-Inside this div render a jsx block - {}
-Inside this jsx invoke the .map array method on the squares array and take in the value and index as arguments to the callback function
-In the callback function return the Square component with all of its previous props, but with two more, squareValue which is equal to the value argument, and index which is equal to the index

code: 
return (
    <div className="App">
        <div className="container">
            {squares.map((val, index) => {
                return (
                    <Square
                        setSquares={setSquares}
                        index={index}
                        squareValue={val}
                        squares={squares}
                        player={player}
                        setPlayer={setPlayer}
                    />
                );
            })}
        </div>
    </div>
);

13. Write logic to handle when a user click on any individual square
-n Square.jsx create a function named handleClick
-Check if there is a value in props.squareValue
    If there is no value, but the player state that is passed through props is true, change the value of props.squares at props.index to “X”, invoke the setSquares function from props passing the new squares array, and toggle the value of props.player
    
    Otherwise change the value at props.index to “O”, invoke props.setSquares with the new value of props.squares and toggle the value of props.player

code: 
const handleClick = () => {
    if (!props.squareValue) {
        if (props.player) {
            props.squares.splice(props.index, 1, "X");
            props.setSquares(props.squares);
            props.setPlayer(!props.player);
        } else {
            props.squares.splice(props.index, 1, "O");
            props.setSquares(props.squares);
            props.setPlayer(!props.player);
        }
    }
};

14. Listen for an onClick envent on the div with the className of square, and invoke the handleClick function
-In the div with className “square” add an onClick property with the value of handleClick

code: 
<div className="square" onClick={handleClick}>
    ...
</div>

15. Using a ternary, render an O or X vased on the props.squareValue 
-Inside the square div render jsx
-Inside that jsx write a ternary statement that evalues if props.squareValue is equal to a string of “O”
-If so, render text of O or an image of the Devmountain Logo (you can use this link for the logo:
https://cdn.discordapp.com/attachments/830137099042816080/984895322184634448/devcircle_1.png
-If the value is not “O”, render the value of props.Squarevalue

code: 
{props.squareValue === "O" ? <img src="https://cdn.discordapp.com/attachments/830137099042816080/984895322184634448/devcircle_1.png" /> : props.squareValue}

16. Write a function that will reset the board when a button is clicked
-In App.js create a function named handleClick
    In this function invoke setSquares passing it an array with 9 empty strings
    
    invoke setPlayer passing a boolean of true
-Inside the div with className of “App” render a button with an onClick equal to handleClick with text of ‘Reset’

code: 
// 1
const handleClick = () => {
    setSquares(["", "", "", "", "", "", "", "", ""])
    setPlayer(true)
}

// 2
<button onClick={handleClick}>Reset</button>

17. Write a function that will check if there is a winner 
-Create a function called calculateWinner that takes in an array
-In that function, create a variable called lines that is equal to an array.
    Each item in the array will be a sub array of winning combinations

    ie: [0, 1, 2] is the top row horizontally of the board, [0, 3, 6] is the diagonal from top left to bottom right, etc

-Loop over the lines variable
    Inside the loop destructure the values of each subArray from lines[i] – const [a, b, c] = lines[i]

    heck if the values of the array at the indexes a, b, and c match. If so, return a string that declares that the value in arr[a] won. Otherwise, return a string of “Who will win?”.

code:
    function calculateWinner(arr) {
    const lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6],
    ];
    for (let i = 0; i < lines.length; i++) {
        const [a, b, c] = lines[i];
        if (
            arr[a] &&
            arr[a] === arr[b] &&
            arr[a] === arr[c]
        ) {
            return `${arr[a]} won!`;
        }
    }
    return "Who will win?";
}

18. Invoke the calculate winner function
-Create a span element as a child of the “App” div
-Inside the span render jsx that is equal to calculateWinner invoked with the squares array as the argument

code:
<span>{calculateWinner(squares)}</span>
